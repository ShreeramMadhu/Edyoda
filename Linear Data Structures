def find_pairs_with_sum(arr, target_sum):
    pairs = []
    seen = set()
    
    for num in arr:
        complement = target_sum - num
        if complement in seen:
            pairs.append((num, complement))
        seen.add(num)
    
    return pairs
Q2. Write a program to reverse an array in place? In place means you cannot create a new array. You have to update the original array.

python
Copy code
def reverse_array(arr):
    left, right = 0, len(arr) - 1
    
    while left < right:
        arr[left], arr[right] = arr[right], arr[left]
        left += 1
        right -= 1
Q3. Write a program to check if two strings are a rotation of each other?

python
Copy code
def are_rotations(str1, str2):
    if len(str1) != len(str2):
        return False
    combined = str1 + str1
    return str2 in combined
Q4. Write a program to print the first non-repeated character from a string?

python
Copy code
def first_non_repeated_char(s):
    char_count = {}
    
    for char in s:
        if char in char_count:
            char_count[char] += 1
        else:
            char_count[char] = 1
    
    for char in s:
        if char_count[char] == 1:
            return char
    return None
Q5. Read about the Tower of Hanoi algorithm. Write a program to implement it.

Here's a Python implementation of the Tower of Hanoi algorithm:

python
Copy code
def tower_of_hanoi(n, source, auxiliary, target):
    if n == 1:
        print(f"Move disk 1 from {source} to {target}")
        return
    tower_of_hanoi(n-1, source, target, auxiliary)
    print(f"Move disk {n} from {source} to {target}")
    tower_of_hanoi(n-1, auxiliary, source, target)

# Usage
tower_of_hanoi(3, 'A', 'B', 'C')
Q6. Read about infix, prefix, and postfix expressions. Write a program to convert postfix to prefix expression.

Here's a Python program to convert a postfix expression to a prefix expression:

python
Copy code
def postfix_to_prefix(postfix_expression):
    stack = []
    
    operators = set(['+', '-', '*', '/', '^'])
    
    for symbol in postfix_expression:
        if symbol not in operators:
            stack.append(symbol)
        else:
            operand2 = stack.pop()
            operand1 = stack.pop()
            expression = symbol + operand1 + operand2
            stack.append(expression)
    
    return stack[0]

# Usage
postfix_expression = "23*5+"
prefix_expression = postfix_to_prefix(postfix_expression)
print(prefix_expression)  # Output: "+*235"
Q7. Write a program to convert prefix expression to infix expression.

Here's a Python program to convert a prefix expression to an infix expression:

python
Copy code
def is_operator(char):
    return char in "+-*/"

def prefix_to_infix(prefix_expression):
    stack = []
    
    for symbol in reversed(prefix_expression):
        if not is_operator(symbol):
            stack.append(symbol)
        else:
            operand1 = stack.pop()
            operand2 = stack.pop()
            expression = f"({operand1}{symbol}{operand2})"
            stack.append(expression)
    
    return stack[0]

# Usage
prefix_expression = "+*23/45"
infix_expression = prefix_to_infix(prefix_expression)
print(infix_expression)  # Output: "((2*3)+(4/5))"
Q8. Write a program to check if all the brackets are closed in a given code snippet.

Here's a Python program to check if all brackets are closed in a code snippet:

python
Copy code
def are_brackets_balanced(code):
    stack = []
    
    for char in code:
        if char in "([{":
            stack.append(char)
        elif char in ")]}":
            if not stack:
                return False
            top = stack.pop()
            if (char == ")" and top != "(") or \
               (char == "]" and top != "[") or \
               (char == "}" and top != "{"):
                return False
    
    return not stack

# Usage
code_snippet = "{[()]}"
print(are_brackets_balanced(code_snippet))  # Output: True
Q9. Write a program to reverse a stack.

python
Copy code
class Stack:
    def __init__(self):
        self.items = []

    def is_empty(self):
        return len(self.items) == 0

    def push(self, item):
        self.items.append(item)

    def pop(self):
        if not self.is_empty():
            return self.items.pop()

    def peek(self):
        if not self.is_empty():
            return self.items[-1]

    def size(self):
        return len(self.items)

def reverse_stack(stack):
    if not stack.is_empty():
        item = stack.pop()
        reverse_stack(stack)
        insert_at_bottom(stack, item)

def insert_at_bottom(stack, item):
    if stack.is_empty():
        stack.push(item)
    else:
        temp = stack.pop()
        insert_at_bottom(stack, item)
        stack.push(temp)

# Usage
s = Stack()
s.push(1)
s.push(2)
s.push(3)
s.push(4)

reverse_stack(s)
while not s.is_empty():
    print(s.pop())  # Output: 1 2 3 4
Q10. Write a program to find the smallest number using a stack.

python
Copy code
class Stack:
    def __init__(self):
        self.items = []

    def is_empty(self):
        return len(self.items) == 0

    def push(self, item):
        self.items.append(item)

    def pop(self):
        if not self.is_empty():
            return self.items.pop()

    def peek(self):
        if not self.is_empty():
            return self.items[-1]

    def size(self):
        return len(self.items)

def find_smallest_number(stack):
    min_num = float('inf')
    while not stack.is_empty():
        num = stack.pop()
        if num < min_num:
            min_num = num
    return min_num

# Usage
s = Stack()
s.push(5)
s.push(2)
s.push(8)
s.push(1)

smallest = find_smallest_number(s)
print(smallest)  # Output: 1
These programs should help you with various programming tasks and concepts. Please note that these are simplified examples, and you may need to adapt them to your specific requirements and constraints.




